{%- set glance_image_location = glance_image_location|default("https://download.cirros-cloud.net/0.3.4/cirros-0.3.4-i386-disk.img") %}
{%- set image_name = image_name|default("^(cirros.*uec|TestVM)$") %}
{%- set flavor_name = flavor_name|default("m1.tiny") %}
{%- set use_existing_users = use_existing_users|default(false) %}
{%- set service_list = service_list|default(["authentication", "cinder", "keystone", "nova", "glance"]) %}
{%- set smoke = smoke|default(true) %}
{%- set controllers_amount = controllers_amount|default(1) %}
{%- if smoke %}
{%- set users_amount = 1 %}
{%- set tenants_amount = 1 %}
{%- else %}
{%- set users_amount = users_amount|default(1) %}
{%- set tenants_amount = tenants_amount|default(1) %}
{%- endif %}
{%- macro user_context(tenants=tenants_amount,users_per_tenant=users_amount) -%}
{%- if use_existing_users and caller is not defined -%} {}
{%- else %}
  {%- if not use_existing_users %}
        users:
          tenants: {{ tenants }}
          users_per_tenant: {{ users_per_tenant }}
  {%- endif %}
  {%- if caller is defined %}
    {{ caller() }}
  {%- endif %}
{%- endif %}
{%- endmacro %}
{%- macro vm_params(image=none, flavor=none, size=none) %}
{%- if flavor is not none %}
        flavor:
          name: {{ flavor }}
{%- endif %}
{%- if image is not none %}
        image:
          name: {{ image }}
{%- endif %}
{%- if size is not none %}
        size: {{ size }}
{%- endif %}
{%- endmacro %}
{%- macro unlimited_volumes() %}
          cinder:
            gigabytes: -1
            snapshots: -1
            volumes: -1
{%- endmacro %}
{%- macro constant_runner(concurrency=1, times=1) %}
        type: constant
  {%- if smoke %}
        concurrency: 1
        times: 1
  {%- else %}
        concurrency: {{ concurrency }}
        times: {{ times }}
  {%- endif %}
{%- endmacro %}
{%- macro rps_runner(rps=1, times=1) %}
        type: rps
  {%- if smoke %}
        rps: 1
        times: 1
  {%- else %}
        rps: {{ rps }}
        times: {{ times }}
  {%- endif %}
{%- endmacro %}
{%- macro no_failures_sla() %}
        failure_rate:
          max: 0
{%- endmacro %}
{%- macro volumes(size=1, volumes_per_tenant=1) %}
        volumes:
          size: {{ size }}
          volumes_per_tenant: {{ volumes_per_tenant }}
{%- endmacro %}
{%- macro unlimited_nova(keypairs=false) %}
          nova:
            cores: -1
            floating_ips: -1
            instances: -1
            {%- if keypairs %}
            key_pairs: -1
            {%- endif %}
            ram: -1
            security_group_rules: -1
            security_groups: -1
{%- endmacro %}
{%- macro unlimited_neutron() %}
          neutron:
            network: -1
            port: -1
            subnet: -1
{%- endmacro %}
{%- macro glance_args(location, container="bare", type="qcow2") %}
        image_container: {{ container }}
        image_type: {{ type }}
        image_location: {{ location }}
{%- endmacro %}
---
{% if "authentication" in service_list %}
  Authenticate.keystone:
    -
      context:
        {{ user_context() }}
      runner:
        {{ rps_runner() }}
      sla:
        {{ no_failures_sla() }}
{% endif %}
{% if "cinder" in service_list %}
  CinderVolumes.create_and_attach_volume:
    -
      args:
        {{ vm_params(image_name,flavor_name,1) }}
      context:
        {% call user_context() %}
        quotas:
          {{ unlimited_volumes() }}
        {% endcall %}
      runner:
        {{ constant_runner() }}
      sla:
        {{ no_failures_sla() }}

  CinderVolumes.create_and_delete_snapshot:
    -
      args:
        force: false
      context:
        {% call user_context() %}
        quotas:
          {{ unlimited_volumes() }}
        {{ volumes() }}
        {% endcall %}
      runner:
        {{ constant_runner() }}
      sla:
        {{ no_failures_sla() }}

  CinderVolumes.create_and_delete_volume:
    -
      args:
        size:
          max: 1
          min: 1
      context:
        {% call user_context() %}
        quotas:
          {{ unlimited_volumes() }}
        {% endcall %}
      runner:
        {{ constant_runner() }}
      sla:
        {{ no_failures_sla() }}
    -
      args:
        {{ vm_params(image_name,none,1) }}
      context:
        {% call user_context() %}
        quotas:
          {{ unlimited_volumes() }}
        {% endcall %}
      runner:
        {{ constant_runner() }}
      sla:
        {{ no_failures_sla() }}
    -
      args:
        size: 1
      context:
        {% call user_context() %}
        quotas:
          {{ unlimited_volumes() }}
        {% endcall %}
      runner:
        {{ constant_runner() }}
      sla:
        {{ no_failures_sla() }}

  CinderVolumes.create_and_extend_volume:
    -
      args:
        new_size: 2
        size: 1
      context:
        {% call user_context() %}
        quotas:
          {{ unlimited_volumes() }}
        {% endcall %}
      runner:
        {{ constant_runner() }}
      sla:
        {{ no_failures_sla() }}

  CinderVolumes.create_and_list_snapshots:
    -
      args:
        detailed: true
        force: false
      context:
        {% call user_context() %}
        quotas:
          {{ unlimited_volumes() }}
        {{ volumes() }}
        {% endcall %}
      runner:
        {{ constant_runner() }}
      sla:
        {{ no_failures_sla() }}

  CinderVolumes.create_and_list_volume:
    -
      args:
        detailed: true
        {{ vm_params(image_name,none,1) }}
      context:
        {% call user_context() %}
        quotas:
          {{ unlimited_volumes() }}
        {% endcall %}
      runner:
        {{ constant_runner() }}
      sla:
        {{ no_failures_sla() }}
    -
      args:
        detailed: true
        size: 1
      context:
        {% call user_context() %}
        quotas:
          {{ unlimited_volumes() }}
        {% endcall %}
      runner:
        {{ constant_runner() }}
      sla:
        {{ no_failures_sla() }}

  CinderVolumes.create_and_upload_volume_to_image:
    -
      args:
        container_format: "bare"
        disk_format: "raw"
        do_delete: true
        force: false
        size: 1
      context:
        {% call user_context() %}
        quotas:
          {{ unlimited_volumes() }}
        {% endcall %}
      runner:
        {{ constant_runner() }}
      sla:
        {{ no_failures_sla() }}

  CinderVolumes.create_from_volume_and_delete_volume:
    -
      args:
        size: 1
      context:
        {% call user_context() %}
        quotas:
          {{ unlimited_volumes() }}
        {{ volumes() }}
        {% endcall %}
      runner:
        {{ constant_runner() }}
      sla:
        {{ no_failures_sla() }}

  CinderVolumes.create_nested_snapshots_and_attach_volume:
    -
      args:
        nested_level:
          max: 1
          min: 1
        size:
          max: 1
          min: 1
      context:
        {% call user_context() %}
        quotas:
          {{ unlimited_volumes() }}
        servers:
          {{ vm_params(image_name,flavor_name,none)|indent(2,true) }}
          servers_per_tenant: 1
        {% endcall %}
      runner:
        {{ constant_runner() }}
      sla:
        {{ no_failures_sla() }}

  Quotas.cinder_update_and_delete:
    -
      args:
        max_quota: 1024
      context:
        {{ user_context() }}
      runner:
        {{ constant_runner() }}
      sla:
        {{ no_failures_sla() }}
{% endif %}
{% if "keystone" in service_list %}
  KeystoneBasic.add_and_remove_user_role:
    -
      context:
        {{ user_context() }}
      runner:
        {{ constant_runner(15*controllers_amount,60*controllers_amount) }}
      sla:
        {{ no_failures_sla() }}

  KeystoneBasic.create_add_and_list_user_roles:
    -
      context:
        {{ user_context() }}
      runner:
        {{ constant_runner(15*controllers_amount,60*controllers_amount) }}
      sla:
        {{ no_failures_sla() }}

  KeystoneBasic.create_and_list_tenants:
    -
      args:
        name_length: 10
      context:
        {{ user_context() }}
      runner:
        {{ constant_runner(15*controllers_amount,60*controllers_amount) }}
      sla:
        {{ no_failures_sla() }}

  KeystoneBasic.create_and_delete_role:
    -
      context:
        {{ user_context() }}
      runner:
        {{ constant_runner(15*controllers_amount,60*controllers_amount) }}
      sla:
        {{ no_failures_sla() }}

  KeystoneBasic.create_and_delete_service:
    -
      context:
        {{ user_context() }}
      runner:
        {{ constant_runner(15*controllers_amount,60*controllers_amount) }}
      sla:
        {{ no_failures_sla() }}

  KeystoneBasic.get_entities:
    -
      context:
        {{ user_context() }}
      runner:
        {{ constant_runner(15*controllers_amount,60*controllers_amount) }}
      sla:
        {{ no_failures_sla() }}

  KeystoneBasic.create_update_and_delete_tenant:
    -
      args:
        name_length: 10
      context:
        {{ user_context() }}
      runner:
        {{ constant_runner(15*controllers_amount,60*controllers_amount) }}
      sla:
        {{ no_failures_sla() }}
{% endif %}
{% if "nova" in service_list %}
  NovaKeypair.boot_and_delete_server_with_keypair:
    -
      args:
        {{ vm_params(image_name, flavor_name) }}
      context:
        {% call user_context() %}
        network:
          networks_per_tenant: 1
          start_cidr: "100.1.0.0/25"
        quotas:
          {{ unlimited_neutron() }}
          {{ unlimited_nova(keypairs=true) }}
        {% endcall %}
      runner:
        {{ constant_runner() }}
      sla:
        {{ no_failures_sla() }}

  NovaKeypair.create_and_delete_keypair:
    -
      context:
        {% call user_context() %}
        quotas:
          {{ unlimited_nova(keypairs=true) }}
        {% endcall %}
      runner:
        {{ constant_runner() }}
      sla:
        {{ no_failures_sla() }}

  NovaKeypair.create_and_list_keypairs:
    -
      context:
        {% call user_context() %}
        quotas:
          {{ unlimited_nova(keypairs=true) }}
        {% endcall %}
      runner:
        {{ constant_runner() }}
      sla:
        {{ no_failures_sla() }}

  NovaServers.boot_and_bounce_server:
    -
      args:
        actions:
          -
            hard_reboot: 1
          -
            soft_reboot: 1
          -
            stop_start: 1
          -
            rescue_unrescue: 1
        {{ vm_params(image_name, flavor_name) }}
      context:
        {% call user_context() %}
        network:
          networks_per_tenant: 1
          start_cidr: "100.1.0.0/25"
        quotas:
          {{ unlimited_neutron() }}
          {{ unlimited_nova() }}
        {% endcall %}
      runner:
        {{ constant_runner() }}
      sla:
        {{ no_failures_sla() }}

  NovaServers.boot_and_delete_server:
    -
      args:
        {{ vm_params(image_name, flavor_name) }}
      context:
        {% call user_context() %}
        network:
          networks_per_tenant: 1
          start_cidr: "100.1.0.0/25"
        quotas:
          {{ unlimited_neutron() }}
          {{ unlimited_nova() }}
        {% endcall %}
      runner:
        {{ constant_runner() }}
      sla:
        {{ no_failures_sla() }}

  NovaServers.boot_and_list_server:
    -
      args:
        detailed: true
        {{ vm_params(image_name, flavor_name) }}
      context:
        {% call user_context() %}
        network:
          networks_per_tenant: 1
          start_cidr: "100.1.0.0/25"
        quotas:
          {{ unlimited_neutron() }}
          {{ unlimited_nova() }}
        {% endcall %}
      runner:
        {{ constant_runner() }}
      sla:
        {{ no_failures_sla() }}

  NovaServers.boot_and_rebuild_server:
    -
      args:
        {{ vm_params(flavor=flavor_name) }}
        from_image:
          name: {{ image_name }}
        to_image:
          name: {{ image_name }}
      context:
        {% call user_context() %}
        network:
          networks_per_tenant: 1
          start_cidr: "100.1.0.0/25"
        quotas:
          {{ unlimited_neutron() }}
          {{ unlimited_nova() }}
        {% endcall %}
      runner:
        {{ constant_runner() }}
      sla:
        {{ no_failures_sla() }}

  NovaServers.boot_server_from_volume_and_delete:
    -
      args:
        {{ vm_params(image_name, flavor_name) }}
        volume_size: 5
      context:
        {% call user_context() %}
        network:
          networks_per_tenant: 1
          start_cidr: "100.1.0.0/25"
        quotas:
          {{ unlimited_volumes() }}
          {{ unlimited_neutron() }}
          {{ unlimited_nova() }}
        {% endcall %}
      runner:
        {{ constant_runner() }}
      sla:
        {{ no_failures_sla() }}

  NovaServers.pause_and_unpause_server:
    -
      args:
        {{ vm_params(image_name, flavor_name) }}
        force_delete: false
      context:
        {% call user_context() %}
        network:
          networks_per_tenant: 1
          start_cidr: "100.1.0.0/25"
        quotas:
          {{ unlimited_neutron() }}
          {{ unlimited_nova() }}
        {% endcall %}
      runner:
        {{ constant_runner() }}
      sla:
        {{ no_failures_sla() }}

  NovaServers.snapshot_server:
    -
      args:
        {{ vm_params(image_name, flavor_name) }}
      context:
        {% call user_context() %}
        network:
          networks_per_tenant: 1
          start_cidr: "100.1.0.0/25"
        quotas:
          {{ unlimited_neutron() }}
          {{ unlimited_nova() }}
        {% endcall %}
      runner:
        {{ constant_runner() }}
      sla:
        {{ no_failures_sla() }}

  Quotas.nova_update_and_delete:
    -
      args:
        max_quota: 1024
      context:
        {{ user_context() }}
      runner:
        {{ constant_runner() }}
      sla:
        {{ no_failures_sla() }}
{% endif %}
{% if "glance" in service_list %}
  GlanceImages.create_and_delete_image:
    -
      args:
        {{ glance_args(location=glance_image_location) }}
      context:
        {{ user_context() }}
      runner:
        {{ constant_runner() }}
      sla:
        {{ no_failures_sla() }}

  GlanceImages.create_and_list_image:
    -
      args:
        {{ glance_args(location=glance_image_location) }}
      context:
        {{ user_context() }}
      runner:
        {{ constant_runner() }}
      sla:
        {{ no_failures_sla() }}

  GlanceImages.list_images:
    -
      args:
        {{ glance_args(location=glance_image_location) }}
        images_per_tenant: 1
      context:
        {{ user_context() }}
      runner:
        {{ constant_runner() }}
      sla:
        {{ no_failures_sla() }}
{% endif %}
